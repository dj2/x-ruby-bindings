#!/usr/bin/env ruby

$: << '../lib' << './lib'

require 'xrb'

WINDOW_WIDTH = 640
WINDOW_HEIGHT = 480

def draw_rect(rect)
  bounds = Xrb::Rectangle.new(x: 0, y: 0, width: WINDOW_WIDTH,
      height: WINDOW_HEIGHT)
  rect.draw_filled_rectangles(@bg_color, [bounds])

  bounds = Xrb::Rectangle.new(x: 50, y: 50, width: 50, height: 50)
  rect.draw_filled_rectangles(@red_color, [bounds])

  bounds = [
      Xrb::Rectangle.new(x: 150, y: 150, width: 50, height: 50),
      Xrb::Rectangle.new(x: 210, y: 150, width: 50, height: 50)
  ]
  rect.draw_filled_rectangles(@green_color, bounds)

  bounds = Xrb::Rectangle.new(x: 250, y: 250, width: 50, height: 50)
  rect.draw_rectangles(@blue_color, [bounds])

  arcs = [
    Xrb::Arc.new(x: 10, y: 100, width: 60, height: 40,
        angle1: 0, angle2: (90 << 6)),
    Xrb::Arc.new(x: 90, y: 100, width: 55, height: 40,
        angle1: 0, angle2: (270 << 6))
  ]
  rect.draw_filled_arcs(@blue_color, arcs)

  arc = Xrb::Arc.new(x: 300, y: 100, width: 60, height: 40,
        angle1: 0, angle2: (270 << 6))
  rect.draw_arcs(@red_color, [arc])

  points = [
      Xrb::Point.new(x: 630, y: 440),
      Xrb::Point.new(x: 635, y: 440),
      Xrb::Point.new(x: 630, y: 445),
      Xrb::Point.new(x: 635, y: 445)
  ]
  rect.draw_points(@red_color, Xrb::COORD_MODE_ORIGIN, points)

  points = [
      Xrb::Point.new(x: 200, y: 300),
      Xrb::Point.new(x: 200, y: 350),
      Xrb::Point.new(x: 150, y: 360),
      Xrb::Point.new(x: 100, y: 360),
      Xrb::Point.new(x: 175, y: 360)
  ]
  rect.draw_filled_shape(@green_color, Xrb::POLY_SHAPE_CONVEX,
      Xrb::COORD_MODE_ORIGIN, points)

  points = [
      Xrb::Point.new(x: 300, y: 300),
      Xrb::Point.new(x: 200, y: 200)
  ]
  rect.draw_lines(@blue_color, Xrb::COORD_MODE_ORIGIN, points)

  segments = [
      Xrb::Segment.new(x1: 500, y1: 450, x2: 600, y2: 400),
      Xrb::Segment.new(x1: 380, y1: 480, x2: 420, y2: 450)
  ]
  rect.draw_line_segments(@green_color, segments)

  # TODO(dj2): Make poly text work ...
#  rect.draw_text8(@black_color, 300, 300, "Hello X11")

  # TODO(dj2): Make image_text8 work ...
#  rect.draw_image_text8(@black_color, "Hello Text", x: 300, y: 400)
end

Xrb.run do |conn|
  conn.list_extensions do |reply|
    reply.names.each { |n| p n.name }
  end

  screen = conn.setup.roots.first

  @bg_color = Xrb::Gc.new(conn,
      value: {
        Xrb::GC_FOREGROUND => screen.white_pixel,
        Xrb::GC_GRAPHICS_EXPOSURES => 0})

  window = Xrb::Window.new(conn, width: WINDOW_WIDTH, height: WINDOW_HEIGHT,
      border_width: 10, value: {
          Xrb::CW_BACK_PIXEL => screen.white_pixel,
          Xrb::CW_EVENT_MASK =>
              Xrb::EVENT_MASK_EXPOSURE | Xrb::EVENT_MASK_BUTTON_PRESS,
          Xrb::CW_DONT_PROPAGATE => Xrb::EVENT_MASK_BUTTON_PRESS})

  mask = 0
  window.attributes do |reply|
    p reply
  end

  window.change_attributes({Xrb::CW_EVENT_MASK => Xrb::EVENT_MASK_EXPOSURE |
      Xrb::EVENT_MASK_BUTTON_PRESS | Xrb::EVENT_MASK_KEY_PRESS})

  window.geometry do |reply|
    p reply
  end

  window.query_tree do |reply|
    p reply
  end

  color_map = Xrb::Colormap.new(conn, window: window)
  color_map.allocate_color(65535, 0, 0) do |color|
    @red_color = Xrb::Gc.new(conn,
      value: {
        Xrb::GC_FOREGROUND => color.pixel,
        Xrb::GC_GRAPHICS_EXPOSURES => 0})
  end
  color_map.allocate_color(0, 65535, 0) do |color|
    @green_color = Xrb::Gc.new(conn,
      value: {
        Xrb::GC_FOREGROUND => color.pixel,
        Xrb::GC_GRAPHICS_EXPOSURES => 0})
  end
  color_map.allocate_color(0, 0, 65535) do |color|
    @blue_color = Xrb::Gc.new(conn,
      value: {
        Xrb::GC_FOREGROUND => color.pixel,
        Xrb::GC_GRAPHICS_EXPOSURES => 0})
  end

  font = Xrb::Font.new(conn, "7x13")
  @black_color = Xrb::Gc.new(conn,
      value: {
        Xrb::GC_FOREGROUND => screen.black_pixel,
        Xrb::GC_FONT => font.id})

  rect = Xrb::Pixmap.new(conn, window: window, width: WINDOW_WIDTH,
      height: WINDOW_HEIGHT)

  window.on_event do |event|
    case event.to_sym
    when :Expose then
      draw_rect(rect)
      rect.copy_area(dst_drawable: window.id, gc: @bg_color.id,
          src_x: 0, src_y: 0, dst_x: 0, dst_y: 0,
          width: WINDOW_WIDTH, height: WINDOW_HEIGHT)
      conn.flush

    when :ButtonPress then
      Xrb.quit
    else
      puts "Unhandled event #{event.ruby_class}"
    end
  end

  conn.on_event do |event|
    p event
  end

  conn.on_error do |error|
    p error
  end

  window.show

  conn.flush
end
