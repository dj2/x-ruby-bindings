#!/usr/bin/env ruby

$: << '../lib' << './lib'

require 'xrb'

WINDOW_WIDTH = 640
WINDOW_HEIGHT = 480

class Julia
  CR = -0.3380
  CI = -0.6230
  ORIGIN_X = -1.8
  ORIGIN_Y = -1.2
  WIDTH = 3.6
  HEIGHT = 2.4

  COLORS = 316

  def initialize(conn, window)
    @conn = conn
    @window = window
    @format = Xrb::IMAGE_FORMAT_Z_PIXMAP

    @colors_setup = false
    @palette = []
  end

  def setup_graphics(screen)
    screen = @conn.setup.roots.first
    @gc = Xrb::Gc.new(@conn, window: @window, value: {
        Xrb::GC_FOREGROUND => screen.black_pixel,
        Xrb::GC_GRAPHICS_EXPOSURES => 0})

    @color_map = Xrb::Colormap.new(@conn, window: @window)
  end

  def palette
    cookies = []
    COLORS.times do |i|
      r, g, b = if i < 128
        [(i << 9), 0, 0]
      elsif i < 255
        [65535, ((i - 127) << 9), 0]
      else
        [65535, 65535, ((i - 255) << 10)]
      end

      cookies << @color_map.allocate_color(r, g, b) do |color|
        @palette << color.pixel
      end
    end

    check_cookies = Proc.new do
      @colors_setup = true
      cookies.each do |cookie|
        if !cookie.replied?
          @colors_setup = false
          break
        end
      end

      Xrb.next_tick { check_cookies.call } unless !@colors_setup
    end
    Xrb.next_tick { check_cookies.call }
  end

  def draw
    return unless @colors_setup

    @image = Xrb::Image.new(@conn, window: @window, gc: @gc, x: 0, y: 0,
        width: WINDOW_WIDTH, height: WINDOW_HEIGHT, plane_mask: ~0,
        format: @format)

    @image[:width].times do |i|
      @image[:height].times do |j|
        zr = ORIGIN_X + WIDTH * (i / @image[:width])
        zi = ORIGIN_Y + HEIGHT * (j / @image[:height])
        c = 0

        while (((zr ** 2) + (zi ** 2)) < 4.0) && c < (COLORS - 1)
          t = zr
          zr = (zr ** 2) - (zi ** 2) + cr
          zi = 2 * t * zi + ci
          c += 1
        end

        @image.pixel(i, j, @palette[c])
      end
    end

    @image.put(x: 0, y:0, left_padding: 0)
  end

  def cleanup
    @image.destroy
    @image = nil
  end
end

Xrb.run do |conn|
  screen = conn.setup.roots.first

  bg_color = Xrb::Gc.new(conn,
      value: {
        Xrb::GC_FOREGROUND => screen.white_pixel,
        Xrb::GC_GRAPHICS_EXPOSURES => 0})

  window = Xrb::Window.new(conn, width: WINDOW_WIDTH, height: WINDOW_HEIGHT,
      border_width: 10, value: {
          Xrb::CW_BACK_PIXEL => screen.white_pixel,
          Xrb::CW_EVENT_MASK =>
              Xrb::EVENT_MASK_EXPOSURE | Xrb::EVENT_MASK_BUTTON_PRESS,
          Xrb::CW_DONT_PROPAGATE => Xrb::EVENT_MASK_BUTTON_PRESS})

  rect = Xrb::Pixmap.new(conn, window: window, width: WINDOW_WIDTH,
      height: WINDOW_HEIGHT)

  bounds = Xrb::Rectangle.new(0, 0, WINDOW_WIDTH, WINDOW_HEIGHT)
  rect.poly_fill_rectangle(bg_color, [bounds])

  julia = Julia.new(conn, window)
  julia.setup_graphics(screen)
  julia.palette

  window.on_event do |event|
    case event.to_sym
    when :Expose then
      rect.copy_area(dest: window, gc: bg_color, from: [0, 0], to: [0, 0],
          size: [WINDOW_WIDTH, WINDOW_HEIGHT])

      julia.draw
      conn.flush

    when :ButtonPress then
      Xrb.stop
    when :ClientMessage then
      puts "Client Message?"
    else
      puts "Unhandled event #{event.ruby_class}"
    end
  end

  conn.on_event do |event|
    p event
  end

  conn.on_error do |error|
    p error
  end

  window.show

  conn.flush
end
